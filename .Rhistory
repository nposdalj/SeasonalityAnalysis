modDayBinTAB$ID = i
if (between(i,1,5)){
modDayBinTAB$Region = Regions[1]}
if (between(i,6,7)){
modDayBinTAB$Region = Regions[2]}
if (i == 1){
DayTab = modDayBinTAB
}
DayTab = merge(DayTab, modDayBinTAB, all = TRUE)
}
#Sort table by ascending order by time
DayTab$tbin = anytime(as.factor(DayTab$tbin))
DayTab$tbin = format(as.POSIXct(DayTab$tbin,format='%m/%d/%Y %H:%M:%S'),format='%d/%m/%Y')
DayTab$tbin <- lubridate::dmy(DayTab$tbin)
DayTab = DayTab %>% arrange(ymd(DayTab$tbin))
DayTab$Julian = format(DayTab$tbin,"%j")
DayTab$Year = format(DayTab$tbin,"%Y")
#PreAbs
DayTab$HoursNorm[is.na(DayTab$HoursNorm)] = 0
#DayTab$HoursNorm %>% mutate_if(is.numeric, ~1 * (. > 0)) #replaces NA values with 0
DayTab$PreAbs = ifelse(DayTab$HoursNorm>0,1,0)
#Export grouped table as .csv
fileName = paste(saveDir,"AllSitesGrouped_GAMGEE_ROW.csv",sep="")
write.csv(DayTab,fileName, row.names = FALSE)
#### Hourly Data
#Hourly table with each column a different site
HourTab = data.frame(matrix(ncol = 0, nrow=0))
for (i in 1:length(Sites)){
HourBinTab = read.csv(filename2[i])
modHourBinTAB = HourBinTab %>%
dplyr::select(tbin, PreAbs, Effort_Bin, Effort_Sec)
name = Sites[i]
names(modHourBinTAB)[names(modHourBinTAB) == "PreAbs"] = name
if (i == 1){
HourTab = modHourBinTAB
}
HourTab = merge(HourTab, modHourBinTAB, all = TRUE)
}
#Add Julian Day and year
HourTab$tbin = anytime(as.factor(HourTab$tbin))
HourTab$Julian = format(HourTab$tbin,"%j")
HourTab$Year = format(HourTab$tbin,"%Y")
#Export grouped table as .csv
fileName = paste(saveDir,"AllSitesGrouped_Binary_GAMGEE_COL.csv",sep="")
write.csv(HourTab,fileName, row.names = FALSE)
#Hourly table with each row that has a site name
HourTab = data.frame(matrix(ncol = 0, nrow=0))
for (i in 1:length(Sites)){
HourBinTab = read.csv(filename2[i])
modHourBinTAB = HourBinTab %>%
dplyr::select(tbin, PreAbs, Effort_Bin, Effort_Sec)
name = Sites[i]
modHourBinTAB$Site = name
modHourBinTAB$ID = i
if (between(i,1,5)){
modHourBinTAB$Region = Regions[1]}
if (between(i,6,7)){
modHourBinTAB$Region = Regions[2]}
if (i == 1){
HourTab = modHourBinTAB
}
HourTab = merge(HourTab, modHourBinTAB, all = TRUE)
}
#Add Julian Day and year
HourTab$tbin = anytime(as.factor(HourTab$tbin))
HourTab$Julian = format(HourTab$tbin,"%j")
HourTab$Year = format(HourTab$tbin,"%Y")
#Export grouped table as .csv
fileName = paste(saveDir,"AllSitesGrouped_Binary_GAMGEE_ROW.csv",sep="")
write.csv(HourTab,fileName, row.names = FALSE)
## This is script was written to take the data from each site in a region and create one table fro GAM_GEE modeling ##
#load libraries
library(tidyverse)
library(anytime)
library(lubridate)
GDrive="I"
#Sites = c('CB','PT','QN','AB','KOA','BD','KS') #The GOA and BSAI Sites
#Regions = c("GOA","BSAI") #GOA AND BSAI Region
#Sites = c('BS','BP','NC','BC','GS','JAX','HZ','OC','WC')
#Regions = c('WAT')
Sites = c('CA','CCE','CORC','DCPP01C','GI','HOKE','PS1','PS2','QC')
Regions = c('CCE')
region = 'CCE'
fileDir = paste(GDrive,":/My Drive/",region,"_TPWS_metadataReduced/SeasonalityAnalysis/",Sites, sep="")#setting the directory
saveDir = paste(GDrive,":/My Drive/",region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites/",sep="")
filename = paste(fileDir,"/",Sites,"_binPresence.csv",sep="")
filename2 = paste(fileDir,"/",Sites,"_binData_forGAMGEE_sexClasses.csv",sep="")
#### Day Data
#Day table with each column a different site
DayTab = data.frame(matrix(ncol = 0, nrow=0))
for (i in 1:length(Sites)){
dayBinTAB = read.csv(filename[i])
modDayBinTAB = dayBinTAB %>%
dplyr::select(tbin, FemaleHoursNorm,JuvenileHoursNorm, MaleHoursNorm)
name = Sites[i]
#names(modDayBinTAB)[names(modDayBinTAB) == "HoursNorm"] = name
if (i == 1){
DayTab = modDayBinTAB
}
DayTab = merge(DayTab, modDayBinTAB, all = TRUE)
}
#Sort table by ascending order by time
DayTab$tbin = anytime(as.factor(DayTab$tbin))
DayTab$tbin = format(as.POSIXct(DayTab$tbin,format='%m/%d/%Y %H:%M:%S'),format='%d/%m/%Y')
DayTab$tbin <- lubridate::dmy(DayTab$tbin)
DayTab = DayTab %>% arrange(ymd(DayTab$tbin))
DayTab$Julian = format(DayTab$tbin,"%j")
DayTab$Year = format(DayTab$tbin,"%Y")
#Export grouped table as .csv
fileName = paste(saveDir,"AllSitesGrouped_GAMGEE_COL_sexClasses.csv",sep="")
write.csv(DayTab,fileName, row.names = FALSE)
#Day table with each row that has a site name
DayTab = data.frame(matrix(ncol = 0, nrow=0))
for (i in 1:length(Sites)){
dayBinTAB = read.csv(filename[i])
modDayBinTAB = dayBinTAB %>%
dplyr::select(tbin, FemaleHoursNorm,JuvenileHoursNorm, MaleHoursNorm, Effort_Bin, Effort_Sec)
name = Sites[i]
modDayBinTAB$Site = name
modDayBinTAB$ID = i
if (between(i,1,5)){
modDayBinTAB$Region = Regions[1]}
if (between(i,6,7)){
modDayBinTAB$Region = Regions[2]}
if (i == 1){
DayTab = modDayBinTAB
}
DayTab = merge(DayTab, modDayBinTAB, all = TRUE)
}
#Sort table by ascending order by time
DayTab$tbin = anytime(as.factor(DayTab$tbin))
DayTab$tbin = format(as.POSIXct(DayTab$tbin,format='%m/%d/%Y %H:%M:%S'),format='%d/%m/%Y')
DayTab$tbin <- lubridate::dmy(DayTab$tbin)
DayTab = DayTab %>% arrange(ymd(DayTab$tbin))
DayTab$Julian = format(DayTab$tbin,"%j")
DayTab$Year = format(DayTab$tbin,"%Y")
#PreAbs
#DayTab$FemaleHoursNorm %>% mutate_if(is.numeric, ~1 * (. > 0)) #replaces NA values with 0
DayTab$PreAbsF = ifelse(DayTab$FemaleHoursNorm>0,1,0)
DayTab$PreAbsJ = ifelse(DayTab$JuvenileHoursNorm>0,1,0)
DayTab$PreAbsM = ifelse(DayTab$MaleHoursNorm>0,1,0)
#Export grouped table as .csv
fileName = paste(saveDir,"AllSitesGrouped_GAMGEE_ROW_sexClasses.csv",sep="")
write.csv(DayTab,fileName, row.names = FALSE)
#### Hourly Data
#Hourly table with each column a different site
HourTab = data.frame(matrix(ncol = 0, nrow=0))
for (i in 1:length(Sites)){
HourBinTab = read.csv(filename2[i])
modHourBinTAB = HourBinTab %>%
dplyr::select(tbin, Female,Juvenile, Male, Effort_Bin, Effort_Sec)
name = Sites[i]
#names(modHourBinTAB)[names(modHourBinTAB) == "PreAbs"] = name
if (i == 1){
HourTab = modHourBinTAB
}
HourTab = merge(HourTab, modHourBinTAB, all = TRUE)
}
#Add Julian Day and year
HourTab$tbin = anytime(as.factor(HourTab$tbin))
HourTab$Julian = format(HourTab$tbin,"%j")
HourTab$Year = format(HourTab$tbin,"%Y")
#Export grouped table as .csv
fileName = paste(saveDir,"AllSitesGrouped_Binary_GAMGEE_COL_sexClasses.csv",sep="")
write.csv(HourTab,fileName, row.names = FALSE)
#Hourly table with each row that has a site name
HourTab = data.frame(matrix(ncol = 0, nrow=0))
for (i in 1:length(Sites)){
HourBinTab = read.csv(filename2[i])
modHourBinTAB = HourBinTab %>%
dplyr::select(tbin, PreAbsF, PreAbsJ, PreAbsM, Effort_Bin, Effort_Sec)
name = Sites[i]
modHourBinTAB$Site = name
modHourBinTAB$ID = i
if (between(i,1,5)){
modHourBinTAB$Region = Regions[1]}
if (between(i,6,7)){
modHourBinTAB$Region = Regions[2]}
if (i == 1){
HourTab = modHourBinTAB
}
HourTab = merge(HourTab, modHourBinTAB, all = TRUE)
}
#Add Julian Day and year
HourTab$tbin = anytime(as.factor(HourTab$tbin))
HourTab$Julian = format(HourTab$tbin,"%j")
HourTab$Year = format(HourTab$tbin,"%Y")
#Export grouped table as .csv
fileName = paste(saveDir,"AllSitesGrouped_Binary_GAMGEE_ROW_sexClasses.csv",sep="")
write.csv(HourTab,fileName, row.names = FALSE)
#Load libraries
library("eulerr")
library("tidyverse")
library("dplyr")
#load data
GDrive =  'I'
Region = 'CCE'
dir = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites",sep="")
#Site Names
#SiteNames = c('CB','PT','QN','BD','AB','KOA','KS')
Sites = c('CA','CCE','CORC','DCPP01C','GI','HOKE','PS1','PS2','QC')
saveDir = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/Plots/All_Sites",sep="")
#General Data
fileName1 = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites/AllSitesGrouped_GAMGEE_ROW.csv",sep="")#setting the directory
DayTable = read.csv(fileName1) #no effort days deleted
DayTable = na.omit(DayTable)
DayTable$tbin = as.Date(DayTable$tbin)
#Sex Specific Data
fileName2 = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites/AllSitesGrouped_GAMGEE_ROW_sexClasses.csv",sep="")#setting the directory
SexDayTable = read.csv(fileName2) #no effort days deleted
SexDayTable = na.omit(SexDayTable)
SexDayTable$tbin = as.Date(SexDayTable$tbin)
#Make new columns to find ratio
SexDayTable$F = SexDayTable$PreAbsF
SexDayTable$J = SexDayTable$PreAbsJ
SexDayTable$M = SexDayTable$PreAbsM
SexDayTable$FJ = SexDayTable$F + SexDayTable$J
SexDayTable$JM = SexDayTable$M + SexDayTable$J
SexDayTable$FM = SexDayTable$F + SexDayTable$M
SexDayTable$FJM = SexDayTable$F + SexDayTable$J + SexDayTable$M
SexDayTable$FJM = replace(SexDayTable$FJM, which(SexDayTable$FJM <3 ), 0) #delete rows that don't have all sexes
SexDayTable$FJM = replace(SexDayTable$FJM, which(SexDayTable$FJM == 3), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$FJ = replace(SexDayTable$FJ, which(SexDayTable$FJ <2), 0) #delete rows that don't have both sexes
SexDayTable$FJ = replace(SexDayTable$FJ, which(SexDayTable$FJM == 1), 0) #delete rows that have all sexes
SexDayTable$FJ = replace(SexDayTable$FJ, which(SexDayTable$FJ == 2), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$JM = replace(SexDayTable$JM, which(SexDayTable$JM <2 ), 0) #delete rows that don't have both sexes
SexDayTable$JM = replace(SexDayTable$JM, which(SexDayTable$FJM == 1), 0) #delete rows that have all sexes
SexDayTable$JM = replace(SexDayTable$JM, which(SexDayTable$JM == 2), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$FM = replace(SexDayTable$FM, which(SexDayTable$FM <2 ), 0) #delete rows that don't have both sexes
SexDayTable$FM = replace(SexDayTable$FM, which(SexDayTable$FJM == 1), 0) #delete rows that have all sexes
SexDayTable$FM = replace(SexDayTable$FM, which(SexDayTable$FM == 2), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$F = replace(SexDayTable$F, which(SexDayTable$FJ ==1 | SexDayTable$FJM ==1 | SexDayTable$FM ==1),0) #delete F only rows when it's being accounted for in another group
SexDayTable$J = replace(SexDayTable$J, which(SexDayTable$FJ ==1 | SexDayTable$JM ==1 | SexDayTable$FJM ==1),0) #delete J only rows when it's being accounted for in another group
SexDayTable$M = replace(SexDayTable$M, which(SexDayTable$JM ==1 | SexDayTable$FM ==1 | SexDayTable$FJM ==1),0) #delete M only rows when it's being accounted for in another group
#loop through each site and pull out relevant data
for (i in 1:length(SiteNames)){
site = SiteNames[i]
SiteDayTable = dplyr::filter(SexDayTable, grepl(site,Site))
#Find Total Days and Days with Presence in General
TotalDays = nrow(SiteDayTable)
PresentDays = apply(SiteDayTable,2,function(x) sum(x > 0))
if (i == 1){
SumTable = data.frame("site" = site, "TotalDays" = TotalDays, "PresentDays" = PresentDays[10])
}else{
SumTableTemp = data.frame("site" = site, "TotalDays" = TotalDays, "PresentDays" = PresentDays[10])
SumTable = rbind(SumTable, SumTableTemp)
}
#Find Ratio of F/M/J Days
if (i == 1){
SiteRatio = c(F = sum(SiteDayTable$F), J = sum(SiteDayTable$J), M = sum(SiteDayTable$M), "F&J" = sum(SiteDayTable$FJ),
"F&M" = sum(SiteDayTable$FM), "J&M" = sum(SiteDayTable$JM), "F&J&M" = sum(SiteDayTable$FJM))
SuMSiteRatio = sum(SiteRatio)
SiteRatioPercent = ceiling((SiteRatio/SuMSiteRatio) * 100)
SiteRatioPercent = list(SiteRatioPercent)
}else{
SiteRatioTemp = c(F = sum(SiteDayTable$F), J = sum(SiteDayTable$J), M = sum(SiteDayTable$M), "F&J" = sum(SiteDayTable$FJ),
"F&M" = sum(SiteDayTable$FM), "J&M" = sum(SiteDayTable$JM), "F&J&M" = sum(SiteDayTable$FJM))
SuMSiteRatioTEMP = sum(SiteRatioTemp)
SiteRatioPercentTEMP = ceiling((SiteRatioTemp/SuMSiteRatioTEMP) * 100)
SiteRatioPercent = append(SiteRatioPercent,list(SiteRatioPercentTEMP))
}
}
#For some reason, I need to run this manually
# Pie Charts --------------------------------------------------------------
for (i in 1:length(SiteNames)){
site = SiteNames[i]
title = paste(saveDir,"/PropVenn", site,".pdf",sep="")
pdf(title)
plot(euler(SiteRatioPercent[[i]]),fills = c('#66c2a5','#fc8d62','#8da0cb'), labels = FALSE, quantities = list(cex=3),
main = paste("Proportional Venn Diagram for ",site,sep = ""))
print(paste('Plot for ',site,' Saved',sep=""))
dev.off()
}
# Relative Bars & Effort -----------------------------------------------------------
#Relative Effort
MaxEffort = max(SumTable$TotalDays)
SumTable$RelativeEffort = SumTable$TotalDays/MaxEffort
#Relative Presence
SumTable$RelativePresence = SumTable$PresentDays/SumTable$TotalDays
#Stacked bar plot for relative effort
title = paste(saveDir,"/RelativeEffort",".pdf",sep="")
pdf(title)
p = ggplot(SumTable, aes(x=site, y=RelativeEffort)) +
geom_bar(stat="identity", fill="lightgrey")+
theme_minimal()
p+ theme(
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey")
)
dev.off()
#Stacked bar plot for relative presence
title = paste(saveDir,"/RelativePresence",".pdf",sep="")
pdf(title)
p = ggplot(SumTable, aes(x=site, y=RelativePresence)) +
geom_bar(stat="identity", fill="darkgray")+
theme_minimal()
p+ theme(
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey")
)
dev.off()
#Load libraries
library("eulerr")
library("tidyverse")
library("dplyr")
#load data
GDrive =  'I'
Region = 'CCE'
dir = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites",sep="")
#Site Names
#SiteNames = c('CB','PT','QN','BD','AB','KOA','KS')
Sites = c('CA','CCE','CORC','DCPP01C','GI','HOKE','PS1','PS2','QC')
saveDir = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/Plots/All_Sites",sep="")
#General Data
fileName1 = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites/AllSitesGrouped_GAMGEE_ROW.csv",sep="")#setting the directory
DayTable = read.csv(fileName1) #no effort days deleted
DayTable = na.omit(DayTable)
DayTable$tbin = as.Date(DayTable$tbin)
#Sex Specific Data
fileName2 = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites/AllSitesGrouped_GAMGEE_ROW_sexClasses.csv",sep="")#setting the directory
SexDayTable = read.csv(fileName2) #no effort days deleted
SexDayTable = na.omit(SexDayTable)
SexDayTable$tbin = as.Date(SexDayTable$tbin)
#Make new columns to find ratio
SexDayTable$F = SexDayTable$PreAbsF
SexDayTable$J = SexDayTable$PreAbsJ
SexDayTable$M = SexDayTable$PreAbsM
SexDayTable$FJ = SexDayTable$F + SexDayTable$J
SexDayTable$JM = SexDayTable$M + SexDayTable$J
SexDayTable$FM = SexDayTable$F + SexDayTable$M
SexDayTable$FJM = SexDayTable$F + SexDayTable$J + SexDayTable$M
SexDayTable$FJM = replace(SexDayTable$FJM, which(SexDayTable$FJM <3 ), 0) #delete rows that don't have all sexes
SexDayTable$FJM = replace(SexDayTable$FJM, which(SexDayTable$FJM == 3), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$FJ = replace(SexDayTable$FJ, which(SexDayTable$FJ <2), 0) #delete rows that don't have both sexes
SexDayTable$FJ = replace(SexDayTable$FJ, which(SexDayTable$FJM == 1), 0) #delete rows that have all sexes
SexDayTable$FJ = replace(SexDayTable$FJ, which(SexDayTable$FJ == 2), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$JM = replace(SexDayTable$JM, which(SexDayTable$JM <2 ), 0) #delete rows that don't have both sexes
SexDayTable$JM = replace(SexDayTable$JM, which(SexDayTable$FJM == 1), 0) #delete rows that have all sexes
SexDayTable$JM = replace(SexDayTable$JM, which(SexDayTable$JM == 2), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$FM = replace(SexDayTable$FM, which(SexDayTable$FM <2 ), 0) #delete rows that don't have both sexes
SexDayTable$FM = replace(SexDayTable$FM, which(SexDayTable$FJM == 1), 0) #delete rows that have all sexes
SexDayTable$FM = replace(SexDayTable$FM, which(SexDayTable$FM == 2), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$F = replace(SexDayTable$F, which(SexDayTable$FJ ==1 | SexDayTable$FJM ==1 | SexDayTable$FM ==1),0) #delete F only rows when it's being accounted for in another group
SexDayTable$J = replace(SexDayTable$J, which(SexDayTable$FJ ==1 | SexDayTable$JM ==1 | SexDayTable$FJM ==1),0) #delete J only rows when it's being accounted for in another group
SexDayTable$M = replace(SexDayTable$M, which(SexDayTable$JM ==1 | SexDayTable$FM ==1 | SexDayTable$FJM ==1),0) #delete M only rows when it's being accounted for in another group
#loop through each site and pull out relevant data
for (i in 1:length(SiteNames)){
site = SiteNames[i]
SiteDayTable = dplyr::filter(SexDayTable, grepl(site,Site))
#Find Total Days and Days with Presence in General
TotalDays = nrow(SiteDayTable)
PresentDays = apply(SiteDayTable,2,function(x) sum(x > 0))
if (i == 1){
SumTable = data.frame("site" = site, "TotalDays" = TotalDays, "PresentDays" = PresentDays[10])
}else{
SumTableTemp = data.frame("site" = site, "TotalDays" = TotalDays, "PresentDays" = PresentDays[10])
SumTable = rbind(SumTable, SumTableTemp)
}
#Find Ratio of F/M/J Days
if (i == 1){
SiteRatio = c(F = sum(SiteDayTable$F), J = sum(SiteDayTable$J), M = sum(SiteDayTable$M), "F&J" = sum(SiteDayTable$FJ),
"F&M" = sum(SiteDayTable$FM), "J&M" = sum(SiteDayTable$JM), "F&J&M" = sum(SiteDayTable$FJM))
SuMSiteRatio = sum(SiteRatio)
SiteRatioPercent = ceiling((SiteRatio/SuMSiteRatio) * 100)
SiteRatioPercent = list(SiteRatioPercent)
}else{
SiteRatioTemp = c(F = sum(SiteDayTable$F), J = sum(SiteDayTable$J), M = sum(SiteDayTable$M), "F&J" = sum(SiteDayTable$FJ),
"F&M" = sum(SiteDayTable$FM), "J&M" = sum(SiteDayTable$JM), "F&J&M" = sum(SiteDayTable$FJM))
SuMSiteRatioTEMP = sum(SiteRatioTemp)
SiteRatioPercentTEMP = ceiling((SiteRatioTemp/SuMSiteRatioTEMP) * 100)
SiteRatioPercent = append(SiteRatioPercent,list(SiteRatioPercentTEMP))
}
}
#Load libraries
library("eulerr")
library("tidyverse")
library("dplyr")
#load data
GDrive =  'I'
Region = 'CCE'
dir = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites",sep="")
#Site Names
#SiteNames = c('CB','PT','QN','BD','AB','KOA','KS')
SiteNames = c('CA','CCE','CORC','DCPP01C','GI','HOKE','PS1','PS2','QC')
saveDir = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/Plots/All_Sites",sep="")
#General Data
fileName1 = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites/AllSitesGrouped_GAMGEE_ROW.csv",sep="")#setting the directory
DayTable = read.csv(fileName1) #no effort days deleted
DayTable = na.omit(DayTable)
DayTable$tbin = as.Date(DayTable$tbin)
#Sex Specific Data
fileName2 = paste(GDrive,":/My Drive/",Region,"_TPWS_metadataReduced/SeasonalityAnalysis/All_Sites/AllSitesGrouped_GAMGEE_ROW_sexClasses.csv",sep="")#setting the directory
SexDayTable = read.csv(fileName2) #no effort days deleted
SexDayTable = na.omit(SexDayTable)
SexDayTable$tbin = as.Date(SexDayTable$tbin)
#Make new columns to find ratio
SexDayTable$F = SexDayTable$PreAbsF
SexDayTable$J = SexDayTable$PreAbsJ
SexDayTable$M = SexDayTable$PreAbsM
SexDayTable$FJ = SexDayTable$F + SexDayTable$J
SexDayTable$JM = SexDayTable$M + SexDayTable$J
SexDayTable$FM = SexDayTable$F + SexDayTable$M
SexDayTable$FJM = SexDayTable$F + SexDayTable$J + SexDayTable$M
SexDayTable$FJM = replace(SexDayTable$FJM, which(SexDayTable$FJM <3 ), 0) #delete rows that don't have all sexes
SexDayTable$FJM = replace(SexDayTable$FJM, which(SexDayTable$FJM == 3), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$FJ = replace(SexDayTable$FJ, which(SexDayTable$FJ <2), 0) #delete rows that don't have both sexes
SexDayTable$FJ = replace(SexDayTable$FJ, which(SexDayTable$FJM == 1), 0) #delete rows that have all sexes
SexDayTable$FJ = replace(SexDayTable$FJ, which(SexDayTable$FJ == 2), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$JM = replace(SexDayTable$JM, which(SexDayTable$JM <2 ), 0) #delete rows that don't have both sexes
SexDayTable$JM = replace(SexDayTable$JM, which(SexDayTable$FJM == 1), 0) #delete rows that have all sexes
SexDayTable$JM = replace(SexDayTable$JM, which(SexDayTable$JM == 2), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$FM = replace(SexDayTable$FM, which(SexDayTable$FM <2 ), 0) #delete rows that don't have both sexes
SexDayTable$FM = replace(SexDayTable$FM, which(SexDayTable$FJM == 1), 0) #delete rows that have all sexes
SexDayTable$FM = replace(SexDayTable$FM, which(SexDayTable$FM == 2), 1) #only keep rows that have both sexes and make it equal to 1
SexDayTable$F = replace(SexDayTable$F, which(SexDayTable$FJ ==1 | SexDayTable$FJM ==1 | SexDayTable$FM ==1),0) #delete F only rows when it's being accounted for in another group
SexDayTable$J = replace(SexDayTable$J, which(SexDayTable$FJ ==1 | SexDayTable$JM ==1 | SexDayTable$FJM ==1),0) #delete J only rows when it's being accounted for in another group
SexDayTable$M = replace(SexDayTable$M, which(SexDayTable$JM ==1 | SexDayTable$FM ==1 | SexDayTable$FJM ==1),0) #delete M only rows when it's being accounted for in another group
#loop through each site and pull out relevant data
for (i in 1:length(SiteNames)){
site = SiteNames[i]
SiteDayTable = dplyr::filter(SexDayTable, grepl(site,Site))
#Find Total Days and Days with Presence in General
TotalDays = nrow(SiteDayTable)
PresentDays = apply(SiteDayTable,2,function(x) sum(x > 0))
if (i == 1){
SumTable = data.frame("site" = site, "TotalDays" = TotalDays, "PresentDays" = PresentDays[10])
}else{
SumTableTemp = data.frame("site" = site, "TotalDays" = TotalDays, "PresentDays" = PresentDays[10])
SumTable = rbind(SumTable, SumTableTemp)
}
#Find Ratio of F/M/J Days
if (i == 1){
SiteRatio = c(F = sum(SiteDayTable$F), J = sum(SiteDayTable$J), M = sum(SiteDayTable$M), "F&J" = sum(SiteDayTable$FJ),
"F&M" = sum(SiteDayTable$FM), "J&M" = sum(SiteDayTable$JM), "F&J&M" = sum(SiteDayTable$FJM))
SuMSiteRatio = sum(SiteRatio)
SiteRatioPercent = ceiling((SiteRatio/SuMSiteRatio) * 100)
SiteRatioPercent = list(SiteRatioPercent)
}else{
SiteRatioTemp = c(F = sum(SiteDayTable$F), J = sum(SiteDayTable$J), M = sum(SiteDayTable$M), "F&J" = sum(SiteDayTable$FJ),
"F&M" = sum(SiteDayTable$FM), "J&M" = sum(SiteDayTable$JM), "F&J&M" = sum(SiteDayTable$FJM))
SuMSiteRatioTEMP = sum(SiteRatioTemp)
SiteRatioPercentTEMP = ceiling((SiteRatioTemp/SuMSiteRatioTEMP) * 100)
SiteRatioPercent = append(SiteRatioPercent,list(SiteRatioPercentTEMP))
}
}
#For some reason, I need to run this manually
# Pie Charts --------------------------------------------------------------
for (i in 1:length(SiteNames)){
site = SiteNames[i]
title = paste(saveDir,"/PropVenn", site,".pdf",sep="")
pdf(title)
plot(euler(SiteRatioPercent[[i]]),fills = c('#66c2a5','#fc8d62','#8da0cb'), labels = FALSE, quantities = list(cex=3),
main = paste("Proportional Venn Diagram for ",site,sep = ""))
print(paste('Plot for ',site,' Saved',sep=""))
dev.off()
}
# Relative Bars & Effort -----------------------------------------------------------
#Relative Effort
MaxEffort = max(SumTable$TotalDays)
SumTable$RelativeEffort = SumTable$TotalDays/MaxEffort
#Relative Presence
SumTable$RelativePresence = SumTable$PresentDays/SumTable$TotalDays
#Stacked bar plot for relative effort
title = paste(saveDir,"/RelativeEffort",".pdf",sep="")
pdf(title)
p = ggplot(SumTable, aes(x=site, y=RelativeEffort)) +
geom_bar(stat="identity", fill="lightgrey")+
theme_minimal()
p+ theme(
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey")
)
dev.off()
#Stacked bar plot for relative presence
title = paste(saveDir,"/RelativePresence",".pdf",sep="")
pdf(title)
p = ggplot(SumTable, aes(x=site, y=RelativePresence)) +
geom_bar(stat="identity", fill="darkgray")+
theme_minimal()
p+ theme(
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey")
)
dev.off()
